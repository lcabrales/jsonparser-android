
/**
 * Generates the full class in plain text containing the specified methods and definitions.
 * 
 * @author Lucas De Morais Cabrales
 * @since 2018-01-18
 */
public class ClassCreator {

	/**
	 * Name of the Java class.
	 */
	private String className;
	/**
	 * Database headers (constants).
	 */
	private String tableHeaders;
	/**
	 * Java class variables in plain text.
	 */
	private String variables;
	/**
	 * fromJson() method in plain text.
	 */
	private String json;
	/**
	 * Compilation of database methods in plain text.
	 */
	private String database;
	/**
	 * Whether to output the database methods.
	 */
	private boolean isDatabase;
	/**
	 * Whether to output the needed imports.
	 */
	private boolean hasImports = true;
	
	/**
	 * Full constructor with database option
	 * 
	 * @param className Name of the class
	 * @param tableHeaders Database table definition
	 * @param variables Java model variables
	 * @param json fromJson() method
	 * @param database Database methods
	 */
	public ClassCreator(String className, String tableHeaders, 
			String variables, String json, String database) {
		this.className = className;
		this.tableHeaders = tableHeaders;
		this.variables = variables;
		this.json = json;
		this.database = database;
		
		isDatabase = true;
	}
	
	/**
	 * Constructor that generates the simplified class without database.
	 * 
	 * @param className Name of the class
	 * @param variables Java model variables
	 * @param json fromJson() method
	 */
	public ClassCreator(String className, String variables, String json) {
		this.className = className;
		this.variables = variables;
		this.json = json;
		
		isDatabase = false;
	}
	
	/**
	 * Retrieves the full class text value, it's the final response of the program.
	 * 
	 * @return Full class definition in plain text.
	 */
	public String getClassDefinition() {
		String classDefinition = getImports() + "\n// Model auto-generated by JSONParser\n"
				+ "\npublic class " + className + " { \n";
		if (isDatabase) 
			return classDefinition + tableHeaders + "\n" + getTag() + "\n" + variables + "\n"
					+ "\n" + getConstructor() + " " + json + " " + database + "}";
		else 
			return classDefinition + getTag() + "\n" + variables + "\n" 
					+ " " + getConstructor() + " " + json + "}";
	}
	
	/**
	 * Retrieves the needed definitions of class imports, 
	 * only if it is enabled by the hard-coded variable {@link hasImports}
	 * 
	 * @return Needed import definitions in plain text, or nothing.
	 */
	private String getImports() {
		if (hasImports) {
			String imports = "import org.json.JSONException; import org.json.JSONObject;";
			
			if (isDatabase) {
				imports += "import android.content.ContentValues; import android.database.Cursor;"
						+ "import java.util.ArrayList;";
			}
			
			return imports;
		} else return "";
	}
	
	/**
	 * Retrieves the TAG constant definition based on the class name.
	 * 
	 * @return TAG constant definition in plain text.
	 */
	private String getTag() {
		return "private static final String TAG = \"" + className + "\";";
	}
	
	/**
	 * Retrieves the empty constructor definition for the generated class.
	 * 
	 * @return Empty class constructor in plain text.
	 */
	private String getConstructor() {
		return "public " + className + "(){}";
	}
}
